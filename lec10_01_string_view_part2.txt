=========== string view - cont =======================
# reminder: 
    c++17
    faydasi: string-read interface e sahip, lightweight
    dikkat: sview, yazinin sahibi degil, gosterilen yazi hayatta degilse undefined behaviour

## tipik hatalar: 
    dikkat: fonksiyonun string_view dondurmesi (dondurulen variable hayatta degilse)
    dikkat: sview.data() returns the pointer to char array (yazi), Null terminating olmayabilir
    dikkat: sview in gosterdigi yazi reallocation/modification sonrasi dangling olabilir

# soru: asagida tanimsiz davranis var

    template<typename T>
    T concatenate(const T& x, const T& y)
    {
        return x + y;
    }

    std::string operator+(std::string_view x, std::string_view y)
    {
        return std::string{x} + std::string{y};
    }

    int main()
    {
        std::string_view sv{"harun"};

        auto val = concatenate(sv, sv);     // type of val is string_view

        std::cout << val << "\n";           // val has a dangling reference
    }

# soru:

    std::string get_str(int val)
    {
        return std::to_string(ival);
    }

    int main()
    {
        using namespace std;

        int x;
        cin >> x;

        // == reminder
        // auto& r1 = get_str(x);       // error, L-val ref = R-value expression
        // const auto& r2 = get_str(x); // ok
        // auto&& r3 = get_str(x);      // ok
        
        // soru:
        // std::string_view sv = get_str(x);    // undefined behaviour

    }

===============================================
# akif explanation
string view wrapper works as such:

    template <class _CharT, class _Traits....>
    class basic_string_view {
    public:
       typedef _CharT value_type;
       ...
       template <class _Allocator>
       basic_string_view(const basic_string<_CharT, _Traits, _Allocator>& str):
           __data(str.data()), __size(str.size())
       {
       }
    
    private:
       const value_type* __data;
       size_type __size;
    };

=> Temporary R-val input string is only bounded to temp ctor input parameter
   As nothing owns the input temp string, it dies after the ctor init.
===================================================

# soru:

    std::string_view x = "abc\0\0def";      // cstring ctor, Null terminated
    std::string_view y = "abc\0\0def"sv;    // sview ctor, not NULL terminating

    std::cout << x.size() << "\n";      // 3
    std::cout << y.size() << "\n";      // 8

# soru:
    
    char str[] = {'a', 'l', 'p', 'e', 'r'};     // there isn't any NULL char

    string_view sv{str};    // undefined behaviour:
                            // cstring ctor takes input until NULL char

    string_view sv{str, 5}; // ok

    cout << sv << "\n";             // ok, string_view inserter adds NULL
    cout << sv.data() << "\n";      // ub, there is no NULL char at the end


================== sv -> str is NOT ok (implicitly)
# String class copy ctor is explicit and doesn't support copy ctor: 
    string_view -> string

## ex 
   
   string_view sv{"enes alp"};
   
   string str = sv;                 // error, 
                                    // string ctor is explicit,
                                    // no support for copy ctor: string_view -> string
    
## ex 

    void func(std::string str);

    int main()
    {
        string_view sv{"enes alp"};

        func(sv);           // error, no copy ctor: string_view -> string
        
        func(string(sv));   // ok
    }

## ex 

    string func(std::string str)
    {
        string_view sv{"enes alp"};

        return sv;          // error, no copy ctor: string_view -> string
    }

================== str -> sv is ok
## ex:

    string str{"melih cicek"};

    string_view sv = str;       // ok, sview class has a copy ctor for string -> string_view


# string view sinifinin 
    - string_view -> string tur donusumu yapan
    - explicit olmayan
    bir operator functioni var:

    sv = str.operator std::basic_string_view<char, std::char_traits<char>>();
 

## ex:

    string str{"melih cicek"};

    string_view sv;

    sv = str;                   // ok, sview class has a copy assignment for string -> string_view


==================
# string_view nonconst member functionlari
    - remove_prefix
    - remove_suffix

    gosterdigi fonksiyonu degil, string view gozlem araligini degistirir

    ex:
        string_view str{"melih cicek"};

        cout << "(" << str << ")";      // melih cicek
        remove_prefix(6);
        cout << "(" << str << ")";      // cicek 

    ex:
        string_view str{"melih cicek"};

        cout << "(" << str << ")";      // melih cicek
        remove_suffix(6);
        cout << "(" << str << ")";      // melih 

        cout << "(" << str.data() << ")"; // melih cicek, string degismedi

===================== string_view example codes
===========
c++17, yaziyi sayiya donusturme
ex:
    #include <charconv>

    const char* p = "87345.8734ali";
    double dval;
    
    cout << fixed;

    if(auto[ptr, ec] = from_chars(p, p + std::strlen(p), dval); ec == std::errc{})
    {
        cout << "dval = " << dval << "\n";          // 87345.8734
        cout << "ptr - p = " << ptr - p << "\n";    // 10, ptr 'a' nin adresi
    }
    else
    {
        std::cout << "hata\n";  //hata tipi std::errc den ogrenilebilir
    }
===========

# input yaziyi sayiya donustur

    #include <string>
    #include <string_view>
    #include <iostream>
    #include <charconv>
    #include <optional>

    std::optional<int> as_int(std::string_view sv)
    {
        int val;

        // read char sequence into the int
        auto [ptr, ec] = std::from_chars(sv.data(), sv.data() + sv.size(), val);

        if(ec != std::errc{})
            return std::nullopt;
            // return {};           // alternative to nullopt

        return val;
    }


    int main()
    {
         for(auto s: {"42", "077", "hello", "0x33"})
         {
            std::optional<int> oi = asInt(s);
            if(oi)
            {
                std::cout << "(" << s << ") yazisindan elde deilen tamsayi: " << *oi << "\n";
            }
            else
            {
                std::cout << "(" << s << ") yazisindan tamsayi elde edilemiyor\n";
            }
         }
    }

## yazinin basindaki bosluk karakterlerinden sonrasini string_view e at 

    int main()
    {
        string str;
        
        cout << "yazi girin\n";
        getline(cin, str);

        cout << "|" << str << "|" << "\n";


        string_view sv{ str };
    
        // bosluk olmayan ilk karakteri bul, string::npos degilse 
        // (sadece bosluk degilse) index olarak kullan

        sv.remove_prefix(min(sv.find_first_not_of(" \t"), sv.size()));
        cout << "|" << sv << "|" << "\n";
    }

## bir dosyadan idx den sonraki karakterleri bir string e at?

    int main()
    {
        ifstream ifs{"notlar.txt"};

        if(!ifs)
        {
            cerr << "dosya acilamadi\n";
            return 1;
        }

        string str{istream_iterator<char>{ifs}, {} };

        string::size_type idx;
        size_t n;

        auto x = str.substr(idx, n);     // cok pahali bir islem

        string_view sv{ str };
        auto y = sv.substr(idx, n);     // ucuz
    }

=============== irrelevant soru
## 
    decltype(auto) func(int x)
    {
        return (x);     // ub, return type: type(x)&

        //  return x;   // ok, return type: type(x)
                        // auto deduction: R-val ->
    }

    // bu sununla ayni

    int& func(int x)
    {
        return (x);     //ub, automatic omurlu nesneye referans dondurur
    }
=====================================

## sergey zupkov (quaro, dunyadaki en iyi adamlardan biri)
   -> cppref kod example, explanation

  ex: (see in example codes)
    
    int main()
    {
        for(std::string_view const str : {"15 foo", "bar", "42", "5000000"})
        {
            std::cout << "String" << std::quoted(str) << ". ";

            int result{};

            auto [ptr, ec] {std::from_chars(str.data(), str.data() + str.size(), result)};

            if(ec == std::errc())
            {
                std::cout << "Result " << resut << ", ptr -> " << std::quoted(ptr) << "\n";
            }
            else if (ec == std::errc::invalid_argument)
            {
                std::cout << "That is not a number\n";
            }
            else if(ec == std::errc::result_out_of_range)
            {
                std::cout << "The number is larger than int\n";
            }
        }
    }
