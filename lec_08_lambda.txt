#ilk 5 dakikayi kacirdum

================== lambda noexcept
#
    ...


# default parameter is legal

    ex:
        auto f = [](int x = 10) { return x * 5; };

        std::cout << f(20) << "\n";     // ok
        std::cout << f() << "\n";       // ok

# soru:

	int g = 77
    
    auto fx = [=] { return g+1; };
    auto fy = [g = g] { return g+1; };  	// fy olustugunda g icin olusturulan veri elemani defegeri 77, main icindeki assignment g yi degistirmez

	int main()
	{
		int g = 500;
	
		stc::cout >> fx() << "\n";	// 501
		stc::cout >> fy() << "\n";	// 78
	}

# sour:
	
int main() {
	auto x  = [] { static int a{}; return ++a; };
	auto y  = [] { static int a{}; return ++a; };

	std::cout << x() << x() << x() << "\n";
	std::cout << y() << y() << y() << "\n";		

	// out: 123 \n 123
	// x ve y farkli siniflar
}

# soru:
	
int main() {
	auto x  = [] { static int a{}; return ++a; };

	decltype(x) y;	// legal c++20
	decltype(x) z;

	std::cout << y() << y() << y() << "\n";		
	std::cout << z() << z() << z() << "\n";		

	// out: 123 \n 456
	// y ve z ayni turden 

# soru:
	
int main() {
	auto x  = [] { static int a{}; return ++a; };

	y = x;	// copy ctor  
	z = x;  // 

	std::cout << y() << y() << y() << "\n";		
	std::cout << z() << z() << z() << "\n";		

	// out: 123 \n 456
	// y ve z ayni turden 


# soru

int main()
{
	
	auto up = std::make_unique<int>(10);

	auto f = [up = std::move(up)] { std::cout << *up << "\n"; };

	auto g = f;	// gecersiz: f is not copyable 
                // derleyicinin yazacagi copy ctor is deleted 
                // cunku non-copyable uye elemani var

	auto g = std::move(f);	// gecerli, move ctor
}


#******** namaz arasi ************
[generalized lambda]
# auto parametre faydalari:
	1) yazim kolayligi
	
		ex:
			auto get_size = [](const auto& c) { return c.size(); };

			vector<int> ivec(100);
			list<double> dlist(20);

			cout << get_size(ivec) << "\n";
			cout << get_size(dlist) << "\n";



		ex:
            void func(vector<shared_ptr<string>>& s)		
            {
                sort(s.begin(), s.end(),
                    [] (const shared_ptr<string>& x, const shared_ptr<string>& y)
                    {
                        return *x < *y;
                    }
                );

                for_each(s.begin(), s.end(), [](const shared_ptr<string>& s) {
                    if(s) std::cout << *s << "\n"; });
            }

    2) auto ile perfect forwarding

        ex:
            ...

        auto f = [](auto&& ...args) {
            vprint(std::forward<(decltype(args)>(args)...));
        }

        
        ex:

            [](auto& x) {
                decay_t<decltype(x)>::value_type    //???
            }

            // c++20
            []()
             ???

# idioms
## ambiguity resolver (isim yaygin degil)

    ex:

        int f(int);
        int f(double);
        int f(long);

        int main()
        {
            using namespace std;

            vector<int> ivec(100);
            vector<int> xvec(100);

            transform(ivec.begin(), ivec.end(), xvec.begin(), f);
            
            // no syntax error when there is only one f(int)
            // however, now it is syntax error            

            // solution1
            transform(ivec.begin(), ivec.end(), xvec.begin(), static_cast<int(*)(int)>f);
            transform(ivec.begin(), ivec.end(), xvec.begin(), static_cast<int(*)(double)>f);

			// solution2: ambiguity resolver
            transform(ivec.begin(), ivec.end(), xvec.begin(),
				[](auto x) { return f(x); });
        }


		solution2 explanation:
		
        template<typename InIter, typenmae OutIter, typename UFunc>
        OutIter transform(InIter beg, InIter end, OutIter destbeg, Ufunc F)

        // Ufunc function call edilmeden resolve edilemeyecek
        // bu yuzden yukaridaki 3 f functionindan hangisinin secilecegi belirlenemeyecek


i======== ara: sorular ???

# this ptr in lambda

    ex:
    class Myclass {
    public:
        Myclass() = default;
        Myclass(int a, int b) : mx{a}, my{b} {}

        void print() const
        {
            std::cout << "(" << mx << ") (" << my << ")\n";
        }

        void foo()
        {
            auto f = [](int x) { return x * (mx + my); } // error: I cant use mx my
            
			// capturing Myclass' this ptr using [=] is deprecated in c++20
			// this is dangerous since lambda can change class states
			auto f = [=](int x) { return x * (mx + my); } // deprecated in C++20
	
		    // this i dikkatli kullanmazsak, dangling pointer olusturabiliriz	
			auto f = [&](int x) { return x * (this->mx + this->my); } // ok 

			
			// this ptr yi capture-by-copy means: ???
            auto f = [this](int x) { return x * (mx + my); } // ok 

            auto f = [this] {++mx; ++my;}   // ???? sinifin elemanlarini degistirir?
        }

    private:
        int mx{}, my{};
    };


## c++17 oncesi *this i kopyalama yoluyla capture etmeminin yolu yoktu
   bunun icin lambda init capture kullaniliyordu:

   [*this] -> c++17

    ex:

        void foo()
        {
            [starthis = *this] () { ... }   // starthis: kopyalama yoluyla alinan sinifin type i
            
        }

    ex:

        void foo()
        {
            auto f = [starthis = *this] () mutable {
                starthis.mx = 10;
                starthis.my = 10;
			};

            f();    // sinifin elemanlarini degistirmez, 
                    // kopyasinin elemanlarini degistirir
        };


## c++20
    
    auto f = [=, this]() mutable {};    // [=] ile ayni ama c+20 deprecated degil
    auto f = [&, this]() mutable {};
    auto f = [&, *this]() mutable {};
    auto f = [=, *this]() mutable {};


#sorular:
    ??
    auto f = [this, *this]() {} // not allowed


## idiom: positive lambda
    -> eger ??? ise 
       lambda -> function pointer donusumu yapan bir operator fonksionu var

    ex:

    int main()
    {
		int(*fptr)(int) = [](int x) {return x * x;};            // ok 
		
        int(*fptr)(int) = [ival](int x) {return x * ival;};     // error, not stateless

        ??

    }


    ex:

        auto f = [int x] { return x * x; }; // f bir sinif nesnesi

        constexpr auto bx = is_pointer_v<decltype(f)>;   // false
        constexpr auto by = is_class_v<decltype(f)>;     // true


    ex:
        auto f = +[](int x)  {return x * x; };  // positive lambda

        std::cut << typeid(f).name() << "\n";   
        constexpr auto bx = is_pointer_v<decltype(f)>;   // true
        constexpr auto by = is_class_v<decltype(f)>;     // false 

aciklama:
+ ya poiner turunde ... yaada ... olacak
bu yuzden compiler closure class i pointer turune donusturuyor

Neden?
- we want a funciton pointer
- template kullanimi

    template<typenmae T>
    void func(T x)
    {
        std::cout << std::boolalpha;
        std::cout << std::is_pointer_v<T>;
        std::cout << std::is_class_v<T>;
    }

    int main()
    {
        func([](int x) { return x * x; });
        func(+[](int x) { return x * x; });
    }

## idiom: IIFI : immediately invoked function (lambda) expression
- yogun kullanilan bir idiom
- c++ core guidelines tavsiye ediyor

    => const nesnelere ilk deger vermek zorundayiz.
       Ancak bazi druumlarda ilk deger bir hesaplama sonucu elde edilir.

        way-1: 
            gcc statement expression extension:

        way-2:
            write a function that is used only once,
                - thus closed to outside world (polluting the headers)
                - func icindeki local variable lari catch edemeyecegimiz icin
                  bir suru input parametre yazariz

                ex: static int get_init_value(params) { }

         way-3: IIFI

            ex:
            
                void func(int a, int b)
                {
                    int x = 20;
                    int y = 30;
            
                    // IIFI idiom
                    const int x = [=]() {
                        // ...
                        return val;
                    }();
                }

            ex:
                class Myclass {
                public:
                    // ideali sinifin memberlarini init etmek
                    // mx const ise ve ilk deger verecek bir hesaplama lazimsa

                    Myclass() : mx{}    
                }

===============================
# c++20 ile gelen bir fix 

    std::pair<int, int> foo();

    int main()
    {
        auto [x, y] = foo();    // structured binding

		// c++17 bug: structured binding cannot be captured
        auto f = [x](int a) { return a * x; }; 
    }

## 
ex:
	vector<int>	ivec;
	rfill(ivec, 100, Irand{0, 10000});

	auto p = minmax_element(ivec.begin(), ivec.end());
	// p type: pair<vector<int>::iterator, vector<int>::iterator>

	cout << *p.first << " " << *p.second << "\n";

	auto [iter_min, iter_max] = minmax_element(ivec.begin(), ivec.end());

ex: idiomatic code
	if(auto [iter_min, iter_max] = minmax_element(ivec.begin(), ivec.end());
       iter_min > iter_max) {	// konum karsilastirma
	 	// if initializer ve structured binding	
	}
===============================

[c++20 extensions]
# for stateless lambda, these are not deleted:
	default ctor	
	copy assignmend 

	ex:
		auto f = [](int x) { return x * x + 1; };

		decltype(f) g;	// c++20 ok, default ctor is not deleted
		decltype(f) h;

=> set, map gibi siniflarda olmak uzere bu containerlar

	ex:
		set<int, less<int>>	// before C++17
		set<int, less<>>	// C++17: transparent Functor 

		vector<int> ivec(100);
		sort(ivec.begin(), ivec.end(), greater<int>{});	// old
		sort(ivec.begin(), ivec.end(), greater<>{});	// legal, transparent lambda
		sort(ivec.begin(), ivec.end(), greater{});		// legal


	ex:
		auto f = [](int x, int y) { return x % 100 < y % 100; };
		
        set<int, decltype(f)> myset(f);     // c++17, f must be default constructible
                                            // therefore we initialize set with f
        
        set<int, decltype(f)> myset;        // c++20
        myset.insert(12);


===================================================================
=> set gibi container lardaki karsilastirma operatoru su sartlari saglamali:
strict .. ordering:

1) a < a  her zaman false olmak zorunda
2) a < b true => b < a must be false
3) a < b true and b < c => a < c must be true
4) !(a < b) && !(b < a) => a = b
   !(b < c) && !(c < b) =>??? 

irreflixive, anti symetric, transitive, trasn. of equivalance
===================================================================

# lambda, unevaluated context de kullanilanilir

    ex:
        using cmtype =decltype([](...) {return ...});   // c++20, ok
                                                        // c++17, error
        set<int, cmptype> myset;

    ex:
        set<int, decltype([](int x, int y) { return x % 100 < y % 100; })> myset;

    ex:
        template<typename T>
        struct DefaultDelete{
            void operator()(T* p)
            {
                delete p;
            }
        };

        <typename T, typename D = std::default_delete<T>>
        class UniquePtr
        {
        public:
            ~UniquePtr()
            {
                D{}();
            }

        private:
            T* mp;
        }

        // Let's say I want my own deleter

        unique_ptr<int, decltype([](int* p) { ... })>

        // or

        using mydeleter = decltype([](){ ... });
        unique_ptr<int, mydeleter>


    ex:

        class Myclass {
        private:
            decltype([](){}) mx;
        }

