=================== Forwarding Reference ======================

# template function with reference parameter 

  template<typename T>
  void func(T& x)
  {
      // this function does NOT protect input parameters'
	  // - val-cat and 
      // - const ness 
  }

# Forwarding reference (universal reference)

  template<typename T>
  void func(T&& x)
  {
      // this function protects input parameters'
	  // - val-cat (not primary val-cat, only L-val or R-val) 
      // - const ness 
  }

## see the table (lec05_01_perfect_forwarding.jpeg)
     		input   	     T 			    x
     func(   L-val   )     Type&          Type&
     func(const L-val)  const Type&    const Type&
     func(   R-val   )     Type	          Type&&
     func(const R-val)  const Type     const Type&&
     

==============
# std::forward

  	template<typename T>
  	void func(T&& x)
  	{
  	   std::forward<T>(x); 
  	}
  
	forward sadece su isi yapar (conditional move):
	- input R-val => std::move(x)
    - input L-val => x


## [usage]:
	ex:
    	class Myclass {};

    	void f(Myclass&)
    	{
    	    std::cout << "f(Myclass&)\n";
    	}

    	void f(const Myclass&)
    	{
    	    std::cout << "f(const Myclass&)\n";
    	}

    	void f(Myclass&&)
    	{
    	    std::cout << "f(Myclass&&)\n";
    	}

    	void f(const Myclass&&)
    	{
    	    std::cout << "f(const Myclass&&)\n";
    	}


        // func ile call etmek = f ile call etmek
    	template<typename T>
    	void func(T&& x)
    	{
    	   std::forward<T>(x); // either uses "move(x)" or "x"
    	}

  		int main()
  		{
  		    Myclass mx;
  		    const Myclass cmx;

  		    func(mx);             // Myclass&
  		    func(cmx);            // const Myclass&
  		    func(  Myclass{}  );  // Myclass&&
  		    func(std::move(mx));  // Myclass&&
  		    func(std::move(cmx)); // const Myclass&&
  		}


    ex:
        // forward functionality using templates

        template<typename T>
        void func(T&& x)
        {
           if constexpr(std::is_lvalue_reference_v<T>){
              f(x);
           }
           else{
              f(move(x));
           }
        }

# [implementation]
## forward implementation (constexpr is ignored)

    template <typename T>
    T&& Forward(typename std::remove_reference_t<T>& param)
    {
        return static_cast<T&&>(param);
    }

    // [see lec05_02/03_pforwarding_impl for its parameter resolution]


## move implementation
   - input ne olursa olsun R-val yap

    template <typename T>
    constexpr std::remove_reference_t<T>&& Move(T&& t) noexcept
    {
        return static_cast<std::remove_reference_t<T>&&>(param);
    }

====================== common pitfalls ========================================
# forwarding allows writing value-category/constness dependent code

## value category dependent code
  => primary value category sini direk anlayamam
     yani X-val mi, PR-val mi anlasilamaz
    
    way-1:

  template<typename T>
  void func(T&& x)
  {
      if constexpt(std::is_lvalue_reference_v<T>)
      {
          std::cout << "L value\n";
      }
      else
      {
          std::cout << "R value\n";
      }
  }

   way-2 :
  template<typename T>
  void func(T&& x)
  {
      if constexpt(std::is_reference_v<T>)
      {
          std::cout << "R value\n";
      }
      else
      {
          std::cout << "L value\n";
      }
  }


## const ness dependent code

    template<typename T>
    void func(T&& x)
    {
        if constexpr( std::is_const_v<std::remove_reference_t<T>> )
            std::cout << "const value!\n";
        else
            std::cout << "not a const value!\n";
    }

# birden fazla input parametre 4^n overload yazilmasini gerektirir

  template<typename T, typename U>
  void func(T&& x, U&& y) {...}


## variadic template parameters

  ex:
      -> onceki orneklere bak

     template<typename ...Args>
     void func(Args&& ...args)
     {
        f(std::forward<Args>(args)...);
     }


  ex: implement make_unique

    make_unique<string>(12, 'A');   // parametreler string ctor a gonderilecek

    auto uptr = make_unique<string>(12, 'A'); // ??? type of uptr


    // implement:

    template<typename T, typename ...Args>
    std::unique_ptr<T> MakeUnique(Args&& .. args)
    {
       return std::unique_ptr<T>{new T(std::forward<Args>(args)...)};
    }


=====================================================
-> sorular: bunlar universal parametre mi?

##
  template<typename T>
  class Nec{
  public:
    func(T&&);    // forwarding reference

    template<typename U>
    func(U&&);    // universal reference
  }


## const ve volatile is forwarding ref defil


## Nec<T>&& degil
   video ya bak


## vector push back     // degil

#  vector emplace_back  // universal
   

  template<typename ...Args>
  void Vec::emplace_back(Args&& ...args)
  {
      char buffer[sizeof(T)];

      new(buffer)(std::forward<Args>(args)...)
  }

   ???

# specialization overload resolution a katilmaz
=====================================================
# conflicting parameters:

     video ta bak


  solutions

    sol1: 
      void insert(std::vector<std::remove_reference<T> ...)


    sol2: 
      2 different template parameters
        
    sol3:
      container in kendisini bir template parameter yapabiliriz


  => 
    SFNIAE
    yada concept


=====================================================
#  overloading resolution oncelikleri:
   1) arguman ile fonksiyon arasinda tam uyum varsa
   2) template function (forwarding reference)
   
   3) nonconst -> const
   3) PR -> const(A&&), constA&
   ...

========
# derleyici burada nasil cikarim yapar?
  -> asagidaki kodda yapilan sentax hatasi okunur

    template<typename T>
    class TypeTeller;       // class declaration


    template<typename T>
    void func(T)
    {
        TypeTeller<T> x;
    }

    int main()
    {
        int a[10]{};
        
        func(a);  // int*, array decay
        func2(a);  // int[10]

        func
    }

 -> buraya bak

# interview question:

   oyle bir sey yazinki func sadece int ile cagirilabilsin

   template<typemame T>
   void func(T)  = delete;

   void func(int);


#

  const int x = 10;

=========================================================
# universal reference kullanim alani

     class Myclass {
      public:
        std::string get_name&&
        {
          return std::move(mname);
        }

        const std::string& get_name() const&   //2
        {
          return mname;
        }
      private:
        std::string mname{"ali kalan"};
     }


     template<typename T>
     void func(T&& x)
     {
        x.getname();  // x L-value

        std::forward<T>.get_name();   // x L: 2, R: 1 
     }


# universal reference her zaman perfect forwarding icin kullanilmaz
  - const iterator veya normal iterator ??

    template<typename T>
    void func(T&& c)
    {
        algo(c.begin(), c.end()); 
    }

# scott meyers wrong:
    func(T &&r)

    -> sadece tasima icin


# forward fonk. cagirmak yerine bir alternatif:

    template<typename T>
    void call_f(T&& param)
    {
        f(std::forward<decltype(param)>(param));
    }

    -> neden bunu yapariz?
       - lambda ifadeleri

    generalized lambda:
      auto f = [](auto x){};

      closure type in, operator fonksiyonu -> template function
        
        ex:
        class LambdaClosureType{
        public:
            template<typename T>
            void operator()(Tx) const;
        }
    
    
-    auto f = [](auto &&x) {}; // bu bir forwarding ref
        
        ex:
        class LambdaClosureType{
        public:
            template<typename T>
            void operator()(T&& x) const;
        }


- bu lambda functioni perfect forwarding referans olarak yazma

    auto f = [](auto &&x){
        std::forward<decltype(x)>(x) 
    };


  ex2:
    
    auto f = [](auto&& ...x){
        ??? bunu nasil forward ederiz 
    };


=========
=> arada kacirdim
interview ques -> auto&&
=======

# auto&&
   - forwarding reference olusturmanin farkli bir yolu

  ex:
    int x{};

    // bu bir forwarding ref.
    auto &&r = x;   // L-val ref
    auto&& r = 10;  // R-val ref


# range based for loop 


  impl:

    using namespace std;
    vector<int> ivec{1, 2, 3, 4, 5, 6, 7};

    for(auto x : ivec) {
        cout << x << " ";
    }

    // auto range = ivec;    // copy ctor
    // auto& range = ivec;   // range R-val a baglanamz
    
    auto &&range = ivec;  // forwarding ref
                          // 1) her sey baglanir (R-val, L-val)
                          // 2) life extension

    for(auto beg_iter = begin(ivec), end_iter = end(ivec); 
        beg_iter != end_inter; ++beg_iter) 
    {
        auto&& x = *beg_iter;      // iterator dereferenced
                                 // 
    }

...


















